{"title":"Probability","markdown":{"yaml":{"author":"Yi Wang","format":{"html":{"code-fold":true,"html-math-method":"katex"},"pdf":{"geometry":["top=30mm","left=30mm"]},"docx":"default"},"urlcolor":"blue"},"headingText":"Probability","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n```{=tex}\n\\renewcommand{\\thesection}{\\arabic{section}}\n\\setcounter{section}{3}\n```\n\n## Basic concepts of probability\n\nIn this code:\n\n-   We calculate the probability of drawing a Heart from a sample space (a deck of cards).\n\n-   We simulate random events such as a coin toss and rolling a six-sided die.\n\n-   We simulate multiple die rolls and visualize the resulting probability distribution.\n\n-   We calculate the probability of a specific outcome (rolling a 3).\n\n```{r}\n# Set a seed for reproducibility\nset.seed(42)\n\n# Define a sample space (e.g., a deck of cards)\nsample_space <- c(\"Hearts\", \"Diamonds\", \"Clubs\", \"Spades\")\n\n# Calculate the probability of drawing a Heart from the sample space\nprobability_heart <- sum(sample_space == \"Hearts\") / length(sample_space)\n\ncat(\"Probability of drawing a Heart:\", probability_heart, \"\\n\")\n```\n\n```{r}\n# Simulate a random event (e.g., coin toss)\ncoin_toss <- sample(c(\"Heads\", \"Tails\"), size = 1)\n\ncat(\"Result of a random coin toss:\", coin_toss, \"\\n\")\n```\n\n```{r}\n# Simulate rolling a six-sided die\ndie_roll <- sample(1:6, size = 1)\n\ncat(\"Result of rolling a die:\", die_roll, \"\\n\")\n```\n\n```{r}\n# Simulate multiple die rolls and visualize the probability distribution\nnum_rolls <- 1000\ndie_rolls <- sample(1:6, size = num_rolls, replace = TRUE)\n\n# Calculate the relative frequencies for each outcome\nrelative_frequencies <- table(die_rolls) / num_rolls\nrelative_frequencies\n\n# Calculate the probability of rolling a 3\nprobability_roll_3 <- relative_frequencies[3]\n\ncat(\"Probability of rolling a 3:\", probability_roll_3, \"\\n\")\n```\n\n```{r}\n# Visualize the probability distribution with a bar plot\nbarplot(relative_frequencies, main = \"Probability Distribution of Die Rolls\",\n        xlab = \"Die Face\", ylab = \"Probability\", col = \"lightblue\")\n```\n\n## Addition rule and multiplication rule\n\n## Complements, conditional probability, and Bayes' theorem\n\n## Counting\n\n### Calculate factorial $n!$\n\nR provides a built-in function to calculate factorial. You can use the `factorial()` function in R to compute the factorial of a number. Here's how you can use it:\n\n```{r }\nn <- 5\nfactorial_result <- factorial(n)\ncat(\"Factorial of\", n, \"is\", factorial_result, \"\\n\")\n```\n\nReplace the value of `n` with the number for which you want to calculate the factorial, and the `factorial()` function will return the result.\n\n### Find all permutaitons and the number of all permutaions\n\nTo do this, we can use the `permutations` function from the **gtools** package. For any list of size `n`, this function computes all the different combinations we can get when we select `r` items. Here are all the ways we can choose two numbers from a list consisting of `1,2,3`:\n\n```{r, message=FALSE, warning=FALSE}\nlibrary(gtools)\npermutations(3, 2)\n```\n\nNotice that the order matters here: 3,1 is different than 1,3. Also, note that (1,1), (2,2), and (3,3) do not appear because once we pick a number, it can't appear again.\n\nTo get the actual number of permutations, one can use the R-function `nrow()` to find the total number of rows in the output of `permutations`:\n\n```{r}\nlibrary(gtools)\nnrow(permutations(3,2))\n```\n\nAlternatively, we can add a vector `v` to indicate the objects that a permutation is performed on. If you want to see five random seven digit phone numbers out of all possible phone numbers (without repeats), you can type:\n\n```{r}\nall_phone_numbers <- permutations(10, 7, v = 0:9) # Use digits 0, 1, ..., 9 \nn <- nrow(all_phone_numbers)\ncat(\"total number of phone numbers n = \", n, \"\\n\")\n# Randomly sample 5 phone numbers\nprint(\"Randomly sample 5 phone numbers:\")\nindex <- sample(n, 5)\nall_phone_numbers[index,]\n```\n\nInstead of using the numbers 1 through 10, the default, it uses what we provided through `v`: the digits 0 through 9.\n\n### Find all combinations and the number of all combinations\n\nHow about if the order doesn't matter? For example, in Blackjack if you get an Ace and a face card in the first draw, it is called a *Natural 21* and you win automatically. If we wanted to compute the probability of this happening, we would enumerate the *combinations*, not the permutations, since the order does not matter.\n\n```{r}\ncombinations(3,2)\n```\n\nIn the second line, the outcome does not include (2,1) because (1,2) already was enumerated. The same applies to (3,1) and (3,2).\n\nTo get the actual number of combinations, one can do\n\n```{r}\nnrow(combinations(3,2))\n```\n\n(**optional**) Of course, one can define a R-function to calculate a permutation number.\n\n```{r}\n# Function to calculate permutation (nPr)\nnPr <- function(n, r) {\n  if (n < r) {\n    return(0)\n  } else {\n    return(factorial(n) / factorial(n - r))\n  }\n}\nnPr(3,2)\n# Function to calculate combination (nCr)\nnCr <- function(n, r) {\n  if (n < r) {\n    return(0)\n  } else {\n    return(factorial(n) / (factorial(r) * factorial(n - r)))\n  }\n}\nnCr(3,2)\n```\n\n<!-- # Discrete probability distribution -->\n\n<!-- ## Calculate mean, standard deviation and variance with equal probability -->\n\n<!-- You can use R to calculate the mean, standard deviation, and variance of a given data set using built-in functions like `mean()`, `sd()`, and `var()`. Here's some sample R code to do that: -->\n\n<!-- ```{r} -->\n\n<!-- # Sample data set -->\n\n<!-- data_set <- c(12, 15, 18, 21, 24, 27, 30, 33, 36, 39) -->\n\n<!-- # Calculate the mean -->\n\n<!-- mean_value <- mean(data_set) -->\n\n<!-- cat(\"Mean:\", mean_value, \"\\n\") -->\n\n<!-- # Calculate the standard deviation -->\n\n<!-- std_deviation <- sd(data_set) -->\n\n<!-- cat(\"Standard Deviation:\", std_deviation, \"\\n\") -->\n\n<!-- # Calculate the variance -->\n\n<!-- variance <- var(data_set) -->\n\n<!-- cat(\"Variance:\", variance, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- Just replace the data_set vector with your actual data, and this code will compute and print the mean, standard deviation, and variance for your data set. Note the results calculated by `mean()`, `sd()` and `var()` assumes each data points occurs with the equal probability $1/n$, where $n$ is the number of data points. -->\n\n<!-- ## Expectation and standard deviation with a given probability distribution -->\n\n<!-- By definition, -->\n\n<!-- ```{r} -->\n\n<!-- # Define the possible values and their corresponding probabilities -->\n\n<!-- values <- c(1, 2, 3, 4, 5) -->\n\n<!-- probabilities <- c(0.1, 0.2, 0.3, 0.2, 0.2) -->\n\n<!-- # Calculate the mean (expected value) -->\n\n<!-- mean_value <- sum(values * probabilities) -->\n\n<!-- # Print the result -->\n\n<!-- cat(\"Mean (Expected Value) =\", mean_value, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- Or one can use the following built-in function: -->\n\n<!-- ```{r} -->\n\n<!-- wt <- c(5,  5,  4,  1)/15 -->\n\n<!-- x <- c(3.7,3.3,3.5,2.8) -->\n\n<!-- xm <- weighted.mean(x, wt) -->\n\n<!-- xm -->\n\n<!-- ``` -->\n\n<!-- To calculate the variance of a probability distribution in R, you can use the Here's how you can do it: -->\n\n<!-- ```{r} -->\n\n<!-- # Define the values of the random variable (x_i) -->\n\n<!-- values <- c(1, 2, 3, 4, 5) -->\n\n<!-- # Define the probabilities (P(x_i)) -->\n\n<!-- probabilities <- c(0.2, 0.3, 0.1, 0.2, 0.2) -->\n\n<!-- # Calculate the mean (expected value) of the random variable -->\n\n<!-- mean_x <- sum(values * probabilities) -->\n\n<!-- # Calculate the variance using the formula -->\n\n<!-- variance <- sum((values - mean_x)^2 * probabilities) -->\n\n<!-- # Print the variance -->\n\n<!-- cat(\"Variance:\", variance, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- ## Median -->\n\n<!-- ```{r} -->\n\n<!-- # Create a sample vector -->\n\n<!-- data_vector <- c(12, 45, 23, 67, 8, 34, 19) -->\n\n<!-- # Calculate the median -->\n\n<!-- median_value <- median(data_vector) -->\n\n<!-- # Print the median -->\n\n<!-- cat(\"Median:\", median_value, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- ## Binomial probability distributions -->\n\n<!-- You can generate a data set with a binomial distribution in R using the rbinom() function. This function simulates random numbers following a binomial distribution. Here's an example code to generate a data set with a binomial distribution: -->\n\n<!-- ```{r} -->\n\n<!-- # Set the parameters for the binomial distribution -->\n\n<!-- n <- 100    # Number of trials -->\n\n<!-- p <- 0.3    # Probability of success in each trial -->\n\n<!-- # Generate a dataset with a binomial distribution -->\n\n<!-- binomial_data <- rbinom(n, size = n, prob = p) -->\n\n<!-- # Print the generated dataset -->\n\n<!-- print(binomial_data) -->\n\n<!-- # Create a histogram to visualize the data -->\n\n<!-- hist(binomial_data, main = \"Binomial Distribution\", xlab = \"Number of Successes\", ylab = \"Frequency\", col = \"lightblue\", border = \"black\") -->\n\n<!-- # verify the mean =np, and var=npq -->\n\n<!-- # Sample mean -->\n\n<!-- mean(binomial_data)  -->\n\n<!-- # Theoretical mean -->\n\n<!-- n*p -->\n\n<!-- # Sample variance  -->\n\n<!-- var(binomial_data) -->\n\n<!-- # Theoretical variance  -->\n\n<!-- n*p*(1-p) -->\n\n<!-- ``` -->\n\n<!-- You can calculate the probability of specific outcomes in a binomial distribution in R using the dbinom() function, which calculates the *probability mass function* (PMF) of the binomial distribution. Here's how to use it: -->\n\n<!-- ```{r} -->\n\n<!-- # Set the parameters for the binomial distribution -->\n\n<!-- x <- 2     # Number of successes (the outcome you want to calculate the probability for) -->\n\n<!-- n <- 10    # Number of trials -->\n\n<!-- p <- 0.3   # Probability of success in each trial -->\n\n<!-- # Calculate the probability of getting 'x' successes in 'n' trials -->\n\n<!-- probability <- dbinom(x, size = n, prob = p) -->\n\n<!-- # Print the calculated probability -->\n\n<!-- cat(\"Probability of\", x, \"successes in\", n, \"trials:\", probability, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- The `pbinom()` function in R is used to calculate cumulative probabilities for a binomial distribution. Specifically, it calculates the cumulative probability that a random variable following a binomial distribution is less than or equal to a specified value. In other words, it gives you the *cumulative distribution function* (CDF) for a binomial distribution. -->\n\n<!-- Here's the basic syntax of the `pbinom()` function: -->\n\n<!-- ```{r eval=FALSE} -->\n\n<!-- pbinom(q, size, prob, lower.tail = TRUE) -->\n\n<!-- ``` -->\n\n<!-- `q`: The value for which you want to calculate the cumulative probability. -->\n\n<!-- `size`: The number of trials or events in the binomial distribution. -->\n\n<!-- `prob`: The probability of success in each trial. -->\n\n<!-- `lower.tail`: A logical parameter that determines whether you want the cumulative probability for values less than or equal to `q` (`TRUE`) or greater than `q` (`FALSE`). By default, it is set to `TRUE`. -->\n\n<!-- The pbinom() function returns the cumulative probability for the specified value q based on the given parameters. -->\n\n<!-- Here's an example of how to use `pbinom()`: -->\n\n<!-- ```{r} -->\n\n<!-- # Calculate the cumulative probability that X is less than or equal to 3 -->\n\n<!-- cumulative_prob <- pbinom(3, size = 10, prob = 0.3) -->\n\n<!-- # Print the cumulative probability -->\n\n<!-- cat(\"Cumulative Probability:\", cumulative_prob, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- In this example, we're calculating the cumulative probability that a random variable following a binomial distribution with parameters `size = 10` and `prob = 0.3` is less than or equal to `3`. The result is stored in the cumulative_prob variable and printed to the console. -->\n\n<!-- You can use the `pbinom()` function to answer questions like \"What is the probability of getting at most 3 successes in 10 trials with a success probability of 0.3?\" by specifying the appropriate values for q, size, and prob. -->\n\n<!-- ## Poisson probability distributions (Optional) -->\n\n<!-- To generate a data set with a Poisson distribution in R, you can use the `rpois()` function. The Poisson distribution is often used to model the number of events occurring in a fixed interval of time or space when the events happen with a known constant mean rate. Here's how you can use `rpois()`: -->\n\n<!-- ```{r} -->\n\n<!-- # Set the parameters for the Poisson distribution -->\n\n<!-- lambda <- 3  # Mean (average) rate of events -->\n\n<!-- # Generate a dataset with a Poisson distribution -->\n\n<!-- poisson_data <- rpois(n = 100, lambda = lambda) -->\n\n<!-- # Print the generated dataset -->\n\n<!-- print(poisson_data) -->\n\n<!-- # Create a histogram to visualize the data -->\n\n<!-- hist(poisson_data, main = \"Poisson Distribution\", xlab = \"Number of Events\", ylab = \"Frequency\", col = \"lightblue\", border = \"black\") -->\n\n<!-- # Verify the theoretical mean and variance -->\n\n<!-- mean(poisson_data) -->\n\n<!-- #Theoretical mean = lambda -->\n\n<!-- var(poisson_data) -->\n\n<!-- #Theoretical variance = lambda -->\n\n<!-- ``` -->\n\n<!-- To calculate the probability of a specific value occurring in a Poisson distribution in R, you can use the dpois() function. This function calculates the *probability mass function* (PMF) of the Poisson distribution. Here's how to use it: -->\n\n<!-- ```{r} -->\n\n<!-- # Set the parameters for the Poisson distribution -->\n\n<!-- x <- 2     # The specific value for which you want to calculate the probability -->\n\n<!-- lambda <- 3  # Mean (average) rate of events -->\n\n<!-- # Calculate the probability of getting exactly 'x' events -->\n\n<!-- probability <- dpois(x, lambda) -->\n\n<!-- # Print the calculated probability -->\n\n<!-- cat(\"Probability of\", x, \"events:\", probability, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- To calculate the *cumulative distribution function* (CDF) for a Poisson distribution in R, you can use the ppois() function. This function calculates the cumulative probability that a Poisson random variable is less than or equal to a specified value. Here's how to use it: -->\n\n<!-- ```{r} -->\n\n<!-- # Set the parameters for the Poisson distribution -->\n\n<!-- x <- 2     # The specific value for which you want to calculate the cumulative probability -->\n\n<!-- lambda <- 3  # Mean (average) rate of events -->\n\n<!-- # Calculate the cumulative probability of getting less than or equal to 'x' events -->\n\n<!-- cumulative_prob <- ppois(x, lambda) -->\n\n<!-- # Print the calculated cumulative probability -->\n\n<!-- cat(\"Cumulative Probability of less than or equal to\", x, \"events:\", cumulative_prob, \"\\n\") -->\n\n<!-- ``` -->\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n```{=tex}\n\\renewcommand{\\thesection}{\\arabic{section}}\n\\setcounter{section}{3}\n```\n# Probability\n\n## Basic concepts of probability\n\nIn this code:\n\n-   We calculate the probability of drawing a Heart from a sample space (a deck of cards).\n\n-   We simulate random events such as a coin toss and rolling a six-sided die.\n\n-   We simulate multiple die rolls and visualize the resulting probability distribution.\n\n-   We calculate the probability of a specific outcome (rolling a 3).\n\n```{r}\n# Set a seed for reproducibility\nset.seed(42)\n\n# Define a sample space (e.g., a deck of cards)\nsample_space <- c(\"Hearts\", \"Diamonds\", \"Clubs\", \"Spades\")\n\n# Calculate the probability of drawing a Heart from the sample space\nprobability_heart <- sum(sample_space == \"Hearts\") / length(sample_space)\n\ncat(\"Probability of drawing a Heart:\", probability_heart, \"\\n\")\n```\n\n```{r}\n# Simulate a random event (e.g., coin toss)\ncoin_toss <- sample(c(\"Heads\", \"Tails\"), size = 1)\n\ncat(\"Result of a random coin toss:\", coin_toss, \"\\n\")\n```\n\n```{r}\n# Simulate rolling a six-sided die\ndie_roll <- sample(1:6, size = 1)\n\ncat(\"Result of rolling a die:\", die_roll, \"\\n\")\n```\n\n```{r}\n# Simulate multiple die rolls and visualize the probability distribution\nnum_rolls <- 1000\ndie_rolls <- sample(1:6, size = num_rolls, replace = TRUE)\n\n# Calculate the relative frequencies for each outcome\nrelative_frequencies <- table(die_rolls) / num_rolls\nrelative_frequencies\n\n# Calculate the probability of rolling a 3\nprobability_roll_3 <- relative_frequencies[3]\n\ncat(\"Probability of rolling a 3:\", probability_roll_3, \"\\n\")\n```\n\n```{r}\n# Visualize the probability distribution with a bar plot\nbarplot(relative_frequencies, main = \"Probability Distribution of Die Rolls\",\n        xlab = \"Die Face\", ylab = \"Probability\", col = \"lightblue\")\n```\n\n## Addition rule and multiplication rule\n\n## Complements, conditional probability, and Bayes' theorem\n\n## Counting\n\n### Calculate factorial $n!$\n\nR provides a built-in function to calculate factorial. You can use the `factorial()` function in R to compute the factorial of a number. Here's how you can use it:\n\n```{r }\nn <- 5\nfactorial_result <- factorial(n)\ncat(\"Factorial of\", n, \"is\", factorial_result, \"\\n\")\n```\n\nReplace the value of `n` with the number for which you want to calculate the factorial, and the `factorial()` function will return the result.\n\n### Find all permutaitons and the number of all permutaions\n\nTo do this, we can use the `permutations` function from the **gtools** package. For any list of size `n`, this function computes all the different combinations we can get when we select `r` items. Here are all the ways we can choose two numbers from a list consisting of `1,2,3`:\n\n```{r, message=FALSE, warning=FALSE}\nlibrary(gtools)\npermutations(3, 2)\n```\n\nNotice that the order matters here: 3,1 is different than 1,3. Also, note that (1,1), (2,2), and (3,3) do not appear because once we pick a number, it can't appear again.\n\nTo get the actual number of permutations, one can use the R-function `nrow()` to find the total number of rows in the output of `permutations`:\n\n```{r}\nlibrary(gtools)\nnrow(permutations(3,2))\n```\n\nAlternatively, we can add a vector `v` to indicate the objects that a permutation is performed on. If you want to see five random seven digit phone numbers out of all possible phone numbers (without repeats), you can type:\n\n```{r}\nall_phone_numbers <- permutations(10, 7, v = 0:9) # Use digits 0, 1, ..., 9 \nn <- nrow(all_phone_numbers)\ncat(\"total number of phone numbers n = \", n, \"\\n\")\n# Randomly sample 5 phone numbers\nprint(\"Randomly sample 5 phone numbers:\")\nindex <- sample(n, 5)\nall_phone_numbers[index,]\n```\n\nInstead of using the numbers 1 through 10, the default, it uses what we provided through `v`: the digits 0 through 9.\n\n### Find all combinations and the number of all combinations\n\nHow about if the order doesn't matter? For example, in Blackjack if you get an Ace and a face card in the first draw, it is called a *Natural 21* and you win automatically. If we wanted to compute the probability of this happening, we would enumerate the *combinations*, not the permutations, since the order does not matter.\n\n```{r}\ncombinations(3,2)\n```\n\nIn the second line, the outcome does not include (2,1) because (1,2) already was enumerated. The same applies to (3,1) and (3,2).\n\nTo get the actual number of combinations, one can do\n\n```{r}\nnrow(combinations(3,2))\n```\n\n(**optional**) Of course, one can define a R-function to calculate a permutation number.\n\n```{r}\n# Function to calculate permutation (nPr)\nnPr <- function(n, r) {\n  if (n < r) {\n    return(0)\n  } else {\n    return(factorial(n) / factorial(n - r))\n  }\n}\nnPr(3,2)\n# Function to calculate combination (nCr)\nnCr <- function(n, r) {\n  if (n < r) {\n    return(0)\n  } else {\n    return(factorial(n) / (factorial(r) * factorial(n - r)))\n  }\n}\nnCr(3,2)\n```\n\n<!-- # Discrete probability distribution -->\n\n<!-- ## Calculate mean, standard deviation and variance with equal probability -->\n\n<!-- You can use R to calculate the mean, standard deviation, and variance of a given data set using built-in functions like `mean()`, `sd()`, and `var()`. Here's some sample R code to do that: -->\n\n<!-- ```{r} -->\n\n<!-- # Sample data set -->\n\n<!-- data_set <- c(12, 15, 18, 21, 24, 27, 30, 33, 36, 39) -->\n\n<!-- # Calculate the mean -->\n\n<!-- mean_value <- mean(data_set) -->\n\n<!-- cat(\"Mean:\", mean_value, \"\\n\") -->\n\n<!-- # Calculate the standard deviation -->\n\n<!-- std_deviation <- sd(data_set) -->\n\n<!-- cat(\"Standard Deviation:\", std_deviation, \"\\n\") -->\n\n<!-- # Calculate the variance -->\n\n<!-- variance <- var(data_set) -->\n\n<!-- cat(\"Variance:\", variance, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- Just replace the data_set vector with your actual data, and this code will compute and print the mean, standard deviation, and variance for your data set. Note the results calculated by `mean()`, `sd()` and `var()` assumes each data points occurs with the equal probability $1/n$, where $n$ is the number of data points. -->\n\n<!-- ## Expectation and standard deviation with a given probability distribution -->\n\n<!-- By definition, -->\n\n<!-- ```{r} -->\n\n<!-- # Define the possible values and their corresponding probabilities -->\n\n<!-- values <- c(1, 2, 3, 4, 5) -->\n\n<!-- probabilities <- c(0.1, 0.2, 0.3, 0.2, 0.2) -->\n\n<!-- # Calculate the mean (expected value) -->\n\n<!-- mean_value <- sum(values * probabilities) -->\n\n<!-- # Print the result -->\n\n<!-- cat(\"Mean (Expected Value) =\", mean_value, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- Or one can use the following built-in function: -->\n\n<!-- ```{r} -->\n\n<!-- wt <- c(5,  5,  4,  1)/15 -->\n\n<!-- x <- c(3.7,3.3,3.5,2.8) -->\n\n<!-- xm <- weighted.mean(x, wt) -->\n\n<!-- xm -->\n\n<!-- ``` -->\n\n<!-- To calculate the variance of a probability distribution in R, you can use the Here's how you can do it: -->\n\n<!-- ```{r} -->\n\n<!-- # Define the values of the random variable (x_i) -->\n\n<!-- values <- c(1, 2, 3, 4, 5) -->\n\n<!-- # Define the probabilities (P(x_i)) -->\n\n<!-- probabilities <- c(0.2, 0.3, 0.1, 0.2, 0.2) -->\n\n<!-- # Calculate the mean (expected value) of the random variable -->\n\n<!-- mean_x <- sum(values * probabilities) -->\n\n<!-- # Calculate the variance using the formula -->\n\n<!-- variance <- sum((values - mean_x)^2 * probabilities) -->\n\n<!-- # Print the variance -->\n\n<!-- cat(\"Variance:\", variance, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- ## Median -->\n\n<!-- ```{r} -->\n\n<!-- # Create a sample vector -->\n\n<!-- data_vector <- c(12, 45, 23, 67, 8, 34, 19) -->\n\n<!-- # Calculate the median -->\n\n<!-- median_value <- median(data_vector) -->\n\n<!-- # Print the median -->\n\n<!-- cat(\"Median:\", median_value, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- ## Binomial probability distributions -->\n\n<!-- You can generate a data set with a binomial distribution in R using the rbinom() function. This function simulates random numbers following a binomial distribution. Here's an example code to generate a data set with a binomial distribution: -->\n\n<!-- ```{r} -->\n\n<!-- # Set the parameters for the binomial distribution -->\n\n<!-- n <- 100    # Number of trials -->\n\n<!-- p <- 0.3    # Probability of success in each trial -->\n\n<!-- # Generate a dataset with a binomial distribution -->\n\n<!-- binomial_data <- rbinom(n, size = n, prob = p) -->\n\n<!-- # Print the generated dataset -->\n\n<!-- print(binomial_data) -->\n\n<!-- # Create a histogram to visualize the data -->\n\n<!-- hist(binomial_data, main = \"Binomial Distribution\", xlab = \"Number of Successes\", ylab = \"Frequency\", col = \"lightblue\", border = \"black\") -->\n\n<!-- # verify the mean =np, and var=npq -->\n\n<!-- # Sample mean -->\n\n<!-- mean(binomial_data)  -->\n\n<!-- # Theoretical mean -->\n\n<!-- n*p -->\n\n<!-- # Sample variance  -->\n\n<!-- var(binomial_data) -->\n\n<!-- # Theoretical variance  -->\n\n<!-- n*p*(1-p) -->\n\n<!-- ``` -->\n\n<!-- You can calculate the probability of specific outcomes in a binomial distribution in R using the dbinom() function, which calculates the *probability mass function* (PMF) of the binomial distribution. Here's how to use it: -->\n\n<!-- ```{r} -->\n\n<!-- # Set the parameters for the binomial distribution -->\n\n<!-- x <- 2     # Number of successes (the outcome you want to calculate the probability for) -->\n\n<!-- n <- 10    # Number of trials -->\n\n<!-- p <- 0.3   # Probability of success in each trial -->\n\n<!-- # Calculate the probability of getting 'x' successes in 'n' trials -->\n\n<!-- probability <- dbinom(x, size = n, prob = p) -->\n\n<!-- # Print the calculated probability -->\n\n<!-- cat(\"Probability of\", x, \"successes in\", n, \"trials:\", probability, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- The `pbinom()` function in R is used to calculate cumulative probabilities for a binomial distribution. Specifically, it calculates the cumulative probability that a random variable following a binomial distribution is less than or equal to a specified value. In other words, it gives you the *cumulative distribution function* (CDF) for a binomial distribution. -->\n\n<!-- Here's the basic syntax of the `pbinom()` function: -->\n\n<!-- ```{r eval=FALSE} -->\n\n<!-- pbinom(q, size, prob, lower.tail = TRUE) -->\n\n<!-- ``` -->\n\n<!-- `q`: The value for which you want to calculate the cumulative probability. -->\n\n<!-- `size`: The number of trials or events in the binomial distribution. -->\n\n<!-- `prob`: The probability of success in each trial. -->\n\n<!-- `lower.tail`: A logical parameter that determines whether you want the cumulative probability for values less than or equal to `q` (`TRUE`) or greater than `q` (`FALSE`). By default, it is set to `TRUE`. -->\n\n<!-- The pbinom() function returns the cumulative probability for the specified value q based on the given parameters. -->\n\n<!-- Here's an example of how to use `pbinom()`: -->\n\n<!-- ```{r} -->\n\n<!-- # Calculate the cumulative probability that X is less than or equal to 3 -->\n\n<!-- cumulative_prob <- pbinom(3, size = 10, prob = 0.3) -->\n\n<!-- # Print the cumulative probability -->\n\n<!-- cat(\"Cumulative Probability:\", cumulative_prob, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- In this example, we're calculating the cumulative probability that a random variable following a binomial distribution with parameters `size = 10` and `prob = 0.3` is less than or equal to `3`. The result is stored in the cumulative_prob variable and printed to the console. -->\n\n<!-- You can use the `pbinom()` function to answer questions like \"What is the probability of getting at most 3 successes in 10 trials with a success probability of 0.3?\" by specifying the appropriate values for q, size, and prob. -->\n\n<!-- ## Poisson probability distributions (Optional) -->\n\n<!-- To generate a data set with a Poisson distribution in R, you can use the `rpois()` function. The Poisson distribution is often used to model the number of events occurring in a fixed interval of time or space when the events happen with a known constant mean rate. Here's how you can use `rpois()`: -->\n\n<!-- ```{r} -->\n\n<!-- # Set the parameters for the Poisson distribution -->\n\n<!-- lambda <- 3  # Mean (average) rate of events -->\n\n<!-- # Generate a dataset with a Poisson distribution -->\n\n<!-- poisson_data <- rpois(n = 100, lambda = lambda) -->\n\n<!-- # Print the generated dataset -->\n\n<!-- print(poisson_data) -->\n\n<!-- # Create a histogram to visualize the data -->\n\n<!-- hist(poisson_data, main = \"Poisson Distribution\", xlab = \"Number of Events\", ylab = \"Frequency\", col = \"lightblue\", border = \"black\") -->\n\n<!-- # Verify the theoretical mean and variance -->\n\n<!-- mean(poisson_data) -->\n\n<!-- #Theoretical mean = lambda -->\n\n<!-- var(poisson_data) -->\n\n<!-- #Theoretical variance = lambda -->\n\n<!-- ``` -->\n\n<!-- To calculate the probability of a specific value occurring in a Poisson distribution in R, you can use the dpois() function. This function calculates the *probability mass function* (PMF) of the Poisson distribution. Here's how to use it: -->\n\n<!-- ```{r} -->\n\n<!-- # Set the parameters for the Poisson distribution -->\n\n<!-- x <- 2     # The specific value for which you want to calculate the probability -->\n\n<!-- lambda <- 3  # Mean (average) rate of events -->\n\n<!-- # Calculate the probability of getting exactly 'x' events -->\n\n<!-- probability <- dpois(x, lambda) -->\n\n<!-- # Print the calculated probability -->\n\n<!-- cat(\"Probability of\", x, \"events:\", probability, \"\\n\") -->\n\n<!-- ``` -->\n\n<!-- To calculate the *cumulative distribution function* (CDF) for a Poisson distribution in R, you can use the ppois() function. This function calculates the cumulative probability that a Poisson random variable is less than or equal to a specified value. Here's how to use it: -->\n\n<!-- ```{r} -->\n\n<!-- # Set the parameters for the Poisson distribution -->\n\n<!-- x <- 2     # The specific value for which you want to calculate the cumulative probability -->\n\n<!-- lambda <- 3  # Mean (average) rate of events -->\n\n<!-- # Calculate the cumulative probability of getting less than or equal to 'x' events -->\n\n<!-- cumulative_prob <- ppois(x, lambda) -->\n\n<!-- # Print the calculated cumulative probability -->\n\n<!-- cat(\"Cumulative Probability of less than or equal to\", x, \"events:\", cumulative_prob, \"\\n\") -->\n\n<!-- ``` -->\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","output-file":"ch4.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"theme":"cosmo","author":"Yi Wang","urlcolor":"blue"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"ch4.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt","author":"Yi Wang","urlcolor":"blue","geometry":["top=30mm","left=30mm"]},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}