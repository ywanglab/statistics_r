{
  "hash": "f63406527b25b776b06928cabed97be3",
  "result": {
    "markdown": "---\n# title: \"Chapter 5: Discrete Probability Distribution\"\nauthor: \"Yi Wang\"\n# format: html\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreprt\n        \n        \neditor: visual\n---\n\n\n# Discrete probability distribution\n\n## Calculate mean, standard deviation and variance with equal probability\n\nYou can use R to calculate the mean, standard deviation, and variance of a given data set using built-in functions like `mean()`, `sd()`, and `var()`. Here's some sample R code to do that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data set\ndata_set <- c(12, 15, 18, 21, 24, 27, 30, 33, 36, 39)\n\n# Calculate the mean\nmean_value <- mean(data_set)\ncat(\"Mean:\", mean_value, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean: 25.5 \n```\n:::\n\n```{.r .cell-code}\n# Calculate the standard deviation\nstd_deviation <- sd(data_set)\ncat(\"Standard Deviation:\", std_deviation, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStandard Deviation: 9.082951 \n```\n:::\n\n```{.r .cell-code}\n# Calculate the variance\nvariance <- var(data_set)\ncat(\"Variance:\", variance, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVariance: 82.5 \n```\n:::\n:::\n\n\nJust replace the data_set vector with your actual data, and this code will compute and print the mean, standard deviation, and variance for your data set. Note the results calculated by `mean()`, `sd()` and `var()` assumes each data points occurs with the equal probability $1/n$, where $n$ is the number of data points.\n\n## Expectation and standard deviation with a given probability distribution\n\nBy definition,\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the possible values and their corresponding probabilities\nvalues <- c(1, 2, 3, 4, 5)\nprobabilities <- c(0.1, 0.2, 0.3, 0.2, 0.2)\n\n# Calculate the mean (expected value)\nmean_value <- sum(values * probabilities)\n\n# Print the result\ncat(\"Mean (Expected Value) =\", mean_value, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean (Expected Value) = 3.2 \n```\n:::\n:::\n\n\nOr one can use the following built-in function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwt <- c(5,  5,  4,  1)/15\nx <- c(3.7,3.3,3.5,2.8)\nxm <- weighted.mean(x, wt)\nxm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.453333\n```\n:::\n:::\n\n\nTo calculate the variance of a probability distribution in R, you can use the Here's how you can do it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the values of the random variable (x_i)\nvalues <- c(1, 2, 3, 4, 5)\n\n# Define the probabilities (P(x_i))\nprobabilities <- c(0.2, 0.3, 0.1, 0.2, 0.2)\n\n# Calculate the mean (expected value) of the random variable\nmean_x <- sum(values * probabilities)\n\n# Calculate the variance using the formula\nvariance <- sum((values - mean_x)^2 * probabilities)\n\n# Print the variance\ncat(\"Variance:\", variance, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVariance: 2.09 \n```\n:::\n:::\n\n\n## Median\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a sample vector\ndata_vector <- c(12, 45, 23, 67, 8, 34, 19)\n\n# Calculate the median\nmedian_value <- median(data_vector)\n\n# Print the median\ncat(\"Median:\", median_value, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMedian: 23 \n```\n:::\n:::\n\n\n## Binomial probability distributions\n\nYou can generate a data set with a binomial distribution in R using the rbinom() function. This function simulates random numbers following a binomial distribution. Here's an example code to generate a data set with a binomial distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the parameters for the binomial distribution\nn <- 100    # Number of trials\np <- 0.3    # Probability of success in each trial\n\n# Generate a dataset with a binomial distribution\nbinomial_data <- rbinom(n, size = n, prob = p)\n\n# Print the generated dataset\nprint(binomial_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 21 30 26 36 26 25 30 31 41 30 31 33 30 30 30 31 34 29 28 29 32 28 29 27 35\n [26] 31 28 30 29 20 24 35 30 29 35 30 25 33 31 28 33 29 28 32 28 26 32 27 31 31\n [51] 28 25 31 27 31 21 34 31 30 34 29 38 29 28 32 30 35 30 29 44 36 26 31 33 24\n [76] 28 26 28 29 39 31 34 30 36 25 27 29 21 31 31 29 33 27 31 40 38 31 32 35 34\n```\n:::\n\n```{.r .cell-code}\n# Create a histogram to visualize the data\nhist(binomial_data, main = \"Binomial Distribution\", xlab = \"Number of Successes\", ylab = \"Frequency\", col = \"lightblue\", border = \"black\")\n```\n\n::: {.cell-output-display}\n![](ch5_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# verify the mean =np, and var=npq\n# Sample mean\nmean(binomial_data) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30.28\n```\n:::\n\n```{.r .cell-code}\n# Theoretical mean\nn*p\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n\n```{.r .cell-code}\n# Sample variance \nvar(binomial_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17.21374\n```\n:::\n\n```{.r .cell-code}\n# Theoretical variance \nn*p*(1-p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21\n```\n:::\n:::\n\n\nYou can calculate the probability of specific outcomes in a binomial distribution in R using the dbinom() function, which calculates the *probability mass function* (PMF) of the binomial distribution. Here's how to use it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the parameters for the binomial distribution\nx <- 2     # Number of successes (the outcome you want to calculate the probability for)\nn <- 10    # Number of trials\np <- 0.3   # Probability of success in each trial\n\n# Calculate the probability of getting 'x' successes in 'n' trials\nprobability <- dbinom(x, size = n, prob = p)\n\n# Print the calculated probability\ncat(\"Probability of\", x, \"successes in\", n, \"trials:\", probability, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nProbability of 2 successes in 10 trials: 0.2334744 \n```\n:::\n:::\n\n\nThe `pbinom()` function in R is used to calculate cumulative probabilities for a binomial distribution. Specifically, it calculates the cumulative probability that a random variable following a binomial distribution is less than or equal to a specified value. In other words, it gives you the *cumulative distribution function* (CDF) for a binomial distribution.\n\nHere's the basic syntax of the `pbinom()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbinom(q, size, prob, lower.tail = TRUE)\n```\n:::\n\n\n`q`: The value for which you want to calculate the cumulative probability.\n\n`size`: The number of trials or events in the binomial distribution.\n\n`prob`: The probability of success in each trial.\n\n`lower.tail`: A logical parameter that determines whether you want the cumulative probability for values less than or equal to `q` (`TRUE`) or greater than `q` (`FALSE`). By default, it is set to `TRUE`.\n\nThe pbinom() function returns the cumulative probability for the specified value q based on the given parameters.\n\nHere's an example of how to use `pbinom()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the cumulative probability that X is less than or equal to 3\ncumulative_prob <- pbinom(3, size = 10, prob = 0.3)\n\n# Print the cumulative probability\ncat(\"Cumulative Probability:\", cumulative_prob, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCumulative Probability: 0.6496107 \n```\n:::\n:::\n\n\nIn this example, we're calculating the cumulative probability that a random variable following a binomial distribution with parameters `size = 10` and `prob = 0.3` is less than or equal to `3`. The result is stored in the cumulative_prob variable and printed to the console.\n\nYou can use the `pbinom()` function to answer questions like \"What is the probability of getting at most 3 successes in 10 trials with a success probability of 0.3?\" by specifying the appropriate values for q, size, and prob.\n\n## Poisson probability distributions (Optional)\n\nTo generate a data set with a Poisson distribution in R, you can use the `rpois()` function. The Poisson distribution is often used to model the number of events occurring in a fixed interval of time or space when the events happen with a known constant mean rate. Here's how you can use `rpois()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the parameters for the Poisson distribution\nlambda <- 3  # Mean (average) rate of events\n\n# Generate a dataset with a Poisson distribution\npoisson_data <- rpois(n = 100, lambda = lambda)\n\n# Print the generated dataset\nprint(poisson_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 1 4 2 2 3 2 1 5 2 2 2 3 4 1 5 3 1 3 4 2 5 2 4 4 2 2 3 5 5 3 3 4 3 0 3 4 1\n [38] 0 2 5 4 3 4 3 4 4 3 2 1 4 5 3 0 5 4 0 4 3 4 2 4 1 3 2 3 1 4 2 5 2 1 2 2 3\n [75] 5 4 4 2 0 3 1 1 5 5 5 5 1 1 3 1 4 2 3 2 5 6 1 1 4 5\n```\n:::\n\n```{.r .cell-code}\n# Create a histogram to visualize the data\nhist(poisson_data, main = \"Poisson Distribution\", xlab = \"Number of Events\", ylab = \"Frequency\", col = \"lightblue\", border = \"black\")\n```\n\n::: {.cell-output-display}\n![](ch5_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Verify the theoretical mean and variance\nmean(poisson_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.88\n```\n:::\n\n```{.r .cell-code}\n#Theoretical mean = lambda\n\nvar(poisson_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.248081\n```\n:::\n\n```{.r .cell-code}\n#Theoretical variance = lambda\n```\n:::\n\n\nTo calculate the probability of a specific value occurring in a Poisson distribution in R, you can use the dpois() function. This function calculates the *probability mass function* (PMF) of the Poisson distribution. Here's how to use it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the parameters for the Poisson distribution\nx <- 2     # The specific value for which you want to calculate the probability\nlambda <- 3  # Mean (average) rate of events\n\n# Calculate the probability of getting exactly 'x' events\nprobability <- dpois(x, lambda)\n\n# Print the calculated probability\ncat(\"Probability of\", x, \"events:\", probability, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nProbability of 2 events: 0.2240418 \n```\n:::\n:::\n\n\nTo calculate the *cumulative distribution function* (CDF) for a Poisson distribution in R, you can use the ppois() function. This function calculates the cumulative probability that a Poisson random variable is less than or equal to a specified value. Here's how to use it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the parameters for the Poisson distribution\nx <- 2     # The specific value for which you want to calculate the cumulative probability\nlambda <- 3  # Mean (average) rate of events\n\n# Calculate the cumulative probability of getting less than or equal to 'x' events\ncumulative_prob <- ppois(x, lambda)\n\n# Print the calculated cumulative probability\ncat(\"Cumulative Probability of less than or equal to\", x, \"events:\", cumulative_prob, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCumulative Probability of less than or equal to 2 events: 0.4231901 \n```\n:::\n:::\n",
    "supporting": [
      "ch5_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}