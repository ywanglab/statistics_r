[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Elementary Statistics with R: STAT 2670",
    "section": "",
    "text": "Preface\nThis is an R-manual that accompanies the textbook Triola (2022) for the courses STAT 2670: Elementary Statistics offered at Auburn University at Montgomery.\nCredits:\n\nJerome Goddard (Chapters 2 and 3)\nYi Wang (chapters 4 and 5; Overall editing)\nWen Tang (chapters 6 and 7)\nJieun Park (chapters 7, 8 and 10)\n\n\n\n\n\nTriola, Mario F. 2022. Elementary Statistics. USA: Pearson.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html#setting-up-your-own-computing-environment-on-a-personal-computer",
    "href": "intro.html#setting-up-your-own-computing-environment-on-a-personal-computer",
    "title": "1  Setting-up Computing Environment",
    "section": "1.1 Setting up your own computing environment on a personal computer",
    "text": "1.1 Setting up your own computing environment on a personal computer\nThis is the recommended way and the advantage is that it’s easy to handle files.\n\nGo to the website https://posit.co/download/rstudio-desktop/.\nFollow the two steps: 1) download and install R: Choose the appropriate operating system, and then choose “base” to “install R for the first time”. You can simply accept all default options.\n\n\ndownload Rstudio Desktop and Install it.\n\nAfter installation, start R-Studio, and you are ready to use it.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting-up Computing Environment</span>"
    ]
  },
  {
    "objectID": "intro.html#use-r-studio-cloud-no-setting-up-needed",
    "href": "intro.html#use-r-studio-cloud-no-setting-up-needed",
    "title": "1  Setting-up Computing Environment",
    "section": "1.2 Use R-Studio Cloud (No setting-up needed)",
    "text": "1.2 Use R-Studio Cloud (No setting-up needed)\nAlternatively, one can save the hassle of setting up on a personal computer and use the R-Studio Cloud for free. Here are the steps:\n\nGo to the website https://login.rstudio.cloud/.\nEither create a new account using an email address such as your AUM email or simply “Log in using Google” or click on other log-in alternative.\n\nAfter log-in to your account, you are ready to use R Studio.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting-up Computing Environment</span>"
    ]
  },
  {
    "objectID": "ch4.html#basic-concepts-of-probability",
    "href": "ch4.html#basic-concepts-of-probability",
    "title": "2  Probability",
    "section": "2.1 Basic concepts of probability",
    "text": "2.1 Basic concepts of probability\nIn this code:\n\nWe calculate the probability of drawing a Heart from a sample space (a deck of cards).\nWe simulate random events such as a coin toss and rolling a six-sided die.\nWe simulate multiple die rolls and visualize the resulting probability distribution.\nWe calculate the probability of a specific outcome (rolling a 3).\n\n\n\nCode\n# Set a seed for reproducibility\nset.seed(42)\n\n# Define a sample space (e.g., a deck of cards)\nsample_space &lt;- c(\"Hearts\", \"Diamonds\", \"Clubs\", \"Spades\")\n\n# Calculate the probability of drawing a Heart from the sample space\nprobability_heart &lt;- sum(sample_space == \"Hearts\") / length(sample_space)\n\ncat(\"Probability of drawing a Heart:\", probability_heart, \"\\n\")\n\n\nProbability of drawing a Heart: 0.25 \n\n\n\n\nCode\n# Simulate a random event (e.g., coin toss)\ncoin_toss &lt;- sample(c(\"Heads\", \"Tails\"), size = 1)\n\ncat(\"Result of a random coin toss:\", coin_toss, \"\\n\")\n\n\nResult of a random coin toss: Heads \n\n\n\n\nCode\n# Simulate rolling a six-sided die\ndie_roll &lt;- sample(1:6, size = 1)\n\ncat(\"Result of rolling a die:\", die_roll, \"\\n\")\n\n\nResult of rolling a die: 5 \n\n\n\n\nCode\n# Simulate multiple die rolls and visualize the probability distribution\nnum_rolls &lt;- 1000\ndie_rolls &lt;- sample(1:6, size = num_rolls, replace = TRUE)\n\n# Calculate the relative frequencies for each outcome\nrelative_frequencies &lt;- table(die_rolls) / num_rolls\nrelative_frequencies\n\n\ndie_rolls\n    1     2     3     4     5     6 \n0.171 0.192 0.164 0.157 0.154 0.162 \n\n\nCode\n# Calculate the probability of rolling a 3\nprobability_roll_3 &lt;- relative_frequencies[3]\n\ncat(\"Probability of rolling a 3:\", probability_roll_3, \"\\n\")\n\n\nProbability of rolling a 3: 0.164 \n\n\n\n\nCode\n# Visualize the probability distribution with a bar plot\nbarplot(relative_frequencies, main = \"Probability Distribution of Die Rolls\",\n        xlab = \"Die Face\", ylab = \"Probability\", col = \"lightblue\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability</span>"
    ]
  },
  {
    "objectID": "ch4.html#addition-rule-and-multiplication-rule",
    "href": "ch4.html#addition-rule-and-multiplication-rule",
    "title": "2  Probability",
    "section": "2.2 Addition rule and multiplication rule",
    "text": "2.2 Addition rule and multiplication rule",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability</span>"
    ]
  },
  {
    "objectID": "ch4.html#complements-conditional-probability-and-bayes-theorem",
    "href": "ch4.html#complements-conditional-probability-and-bayes-theorem",
    "title": "2  Probability",
    "section": "2.3 Complements, conditional probability, and Bayes’ theorem",
    "text": "2.3 Complements, conditional probability, and Bayes’ theorem",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability</span>"
    ]
  },
  {
    "objectID": "ch4.html#counting",
    "href": "ch4.html#counting",
    "title": "2  Probability",
    "section": "2.4 Counting",
    "text": "2.4 Counting\n\n2.4.1 Calculate factorial n!\nR provides a built-in function to calculate factorial. You can use the factorial() function in R to compute the factorial of a number.\n\n\nCode\nn &lt;- 5\nfactorial_result &lt;- factorial(n)\ncat(\"Factorial of\", n, \"is\", factorial_result, \"\\n\")\n\n\nFactorial of 5 is 120 \n\n\nReplace the value of n with the number for which you want to calculate the factorial, and the factorial() function will return the result.\n\n\n2.4.2 Find all permutations and the number of all permutations\nTo do this, we can use the permutations function from the gtools package. For any list of size n, this function computes all the different permutations P(n,r) we can get when we select r items. Here are all the ways we can choose two numbers from a list consisting of 1,2,3:\n\n\nCode\nlibrary(gtools)\npermutations(3, 2)\n\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    1    3\n[3,]    2    1\n[4,]    2    3\n[5,]    3    1\n[6,]    3    2\n\n\nNotice that the order matters here: 3,1 is different than 1,3. Also, note that (1,1), (2,2), and (3,3) do not appear because once we pick a number, it can’t appear again.\nTo get the actual number of permutations, one can use the R-function nrow() to find the total number of rows in the output of permutations:\n\n\nCode\nlibrary(gtools)\nnrow(permutations(3,2))\n\n\n[1] 6\n\n\nAlternatively, we can add a vector v to indicate the objects that a permutation is performed on. If you want to see five random seven digit phone numbers out of all possible phone numbers (without repeats), you can type:\n\n\nCode\nall_phone_numbers &lt;- permutations(10, 7, v = 0:9) # Use digits 0, 1, ..., 9 \nn &lt;- nrow(all_phone_numbers)\ncat(\"total number of phone numbers n = \", n, \"\\n\")\n\n\ntotal number of phone numbers n =  604800 \n\n\nCode\nprint(\"Randomly sample 5 phone numbers:\")\n\n\n[1] \"Randomly sample 5 phone numbers:\"\n\n\nCode\n# Randomly sample 5 phone numbers\nindex &lt;- sample(n, 5)\nall_phone_numbers[index,]\n\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]    8    9    5    1    6    0    3\n[2,]    4    0    2    3    5    7    8\n[3,]    0    4    6    1    3    2    7\n[4,]    5    8    2    6    4    0    3\n[5,]    7    5    1    0    9    2    6\n\n\nInstead of using the numbers 1 through 10, the default, it uses what we provided through v: the digits 0 through 9.\n\n\n2.4.3 Find all combinations and the number of all combinations\nHow about if the order doesn’t matter? For example, in Blackjack if you get an Ace and a face card in the first draw, it is called a Natural 21 and you win automatically. If we wanted to compute the probability of this happening, we would enumerate the combinations, not the permutations, since the order does not matter.\n\n\nCode\ncombinations(3,2)\n\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    1    3\n[3,]    2    3\n\n\nIn the second line, the outcome does not include (2,1) because (1,2) already was enumerated. The same applies to (3,1) and (3,2).\nTo get the actual number of combinations, one can do\n\n\nCode\nnrow(combinations(3,2))\n\n\n[1] 3\n\n\n(optional) Of course, one can define a R-function to calculate a permutation number.\n\n\nCode\n# Function to calculate permutation (nPr)\nnPr &lt;- function(n, r) {\n  if (n &lt; r) {\n    return(0)\n  } else {\n    return(factorial(n) / factorial(n - r))\n  }\n}\nnPr(3,2)\n\n\n[1] 6\n\n\nCode\n# Function to calculate combination (nCr)\nnCr &lt;- function(n, r) {\n  if (n &lt; r) {\n    return(0)\n  } else {\n    return(factorial(n) / (factorial(r) * factorial(n - r)))\n  }\n}\nnCr(3,2)\n\n\n[1] 3",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Probability</span>"
    ]
  },
  {
    "objectID": "ch5.html#calculate-mean-standard-deviation-and-variance-with-equal-probability",
    "href": "ch5.html#calculate-mean-standard-deviation-and-variance-with-equal-probability",
    "title": "3  Discrete probability distribution",
    "section": "3.1 Calculate mean, standard deviation and variance with equal probability",
    "text": "3.1 Calculate mean, standard deviation and variance with equal probability\nYou can use R to calculate the mean, standard deviation, and variance of a given data set using built-in functions like mean(), sd(), and var(). Here’s some sample R code to do that:\n\n\nCode\n# Sample data set\ndata_set &lt;- c(12, 15, 18, 21, 24, 27, 30, 33, 36, 39)\n\n# Calculate the mean\nmean_value &lt;- mean(data_set)\ncat(\"Mean:\", mean_value, \"\\n\")\n\n\nMean: 25.5 \n\n\nCode\n# Calculate the standard deviation\nstd_deviation &lt;- sd(data_set)\ncat(\"Standard Deviation:\", std_deviation, \"\\n\")\n\n\nStandard Deviation: 9.082951 \n\n\nCode\n# Calculate the variance\nvariance &lt;- var(data_set)\ncat(\"Variance:\", variance, \"\\n\")\n\n\nVariance: 82.5 \n\n\nJust replace the data_set vector with your actual data, and this code will compute and print the mean, standard deviation, and variance for your data set. Note the results calculated by mean(), sd() and var() assumes each data points occurs with the equal probability 1/n, where n is the number of data points.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Discrete probability distribution</span>"
    ]
  },
  {
    "objectID": "ch5.html#expectation-and-standard-deviation-with-a-given-probability-distribution",
    "href": "ch5.html#expectation-and-standard-deviation-with-a-given-probability-distribution",
    "title": "3  Discrete probability distribution",
    "section": "3.2 Expectation and standard deviation with a given probability distribution",
    "text": "3.2 Expectation and standard deviation with a given probability distribution\nBy definition,\n\n\nCode\n# Define the possible values and their corresponding probabilities\nvalues &lt;- c(1, 2, 3, 4, 5)\nprobabilities &lt;- c(0.1, 0.2, 0.3, 0.2, 0.2)\n\n# Calculate the mean (expected value)\nmean_value &lt;- sum(values * probabilities)\n\n# Print the result\ncat(\"Mean (Expected Value) =\", mean_value, \"\\n\")\n\n\nMean (Expected Value) = 3.2 \n\n\nOr one can use the following built-in function:\n\n\nCode\nwt &lt;- c(5,  5,  4,  1)/15\nx &lt;- c(3.7,3.3,3.5,2.8)\nxm &lt;- weighted.mean(x, wt)\nxm\n\n\n[1] 3.453333\n\n\nTo calculate the variance of a probability distribution in R, you can use the Here’s how you can do it:\n\n\nCode\n# Define the values of the random variable (x_i)\nvalues &lt;- c(1, 2, 3, 4, 5)\n\n# Define the probabilities (P(x_i))\nprobabilities &lt;- c(0.2, 0.3, 0.1, 0.2, 0.2)\n\n# Calculate the mean (expected value) of the random variable\nmean_x &lt;- sum(values * probabilities)\n\n# Calculate the variance using the formula\nvariance &lt;- sum((values - mean_x)^2 * probabilities)\n\n# Print the variance\ncat(\"Variance:\", variance, \"\\n\")\n\n\nVariance: 2.09",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Discrete probability distribution</span>"
    ]
  },
  {
    "objectID": "ch5.html#median",
    "href": "ch5.html#median",
    "title": "3  Discrete probability distribution",
    "section": "3.3 Median",
    "text": "3.3 Median\n\n\nCode\n# Create a sample vector\ndata_vector &lt;- c(12, 45, 23, 67, 8, 34, 19)\n\n# Calculate the median\nmedian_value &lt;- median(data_vector)\n\n# Print the median\ncat(\"Median:\", median_value, \"\\n\")\n\n\nMedian: 23",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Discrete probability distribution</span>"
    ]
  },
  {
    "objectID": "ch5.html#binomial-probability-distributions",
    "href": "ch5.html#binomial-probability-distributions",
    "title": "3  Discrete probability distribution",
    "section": "3.4 Binomial probability distributions",
    "text": "3.4 Binomial probability distributions\nYou can generate a data set with a binomial distribution in R using the rbinom() function. This function simulates random numbers following a binomial distribution. Here’s an example code to generate a data set with a binomial distribution:\n\n\nCode\n# Set the parameters for the binomial distribution\nn &lt;- 100    # Number of trials\np &lt;- 0.3    # Probability of success in each trial\n\n# Generate a dataset with a binomial distribution\nbinomial_data &lt;- rbinom(n, size = n, prob = p)\n\n# Print the generated dataset\nprint(binomial_data)\n\n\n  [1] 36 26 36 47 35 22 36 24 31 25 31 22 30 22 37 23 28 33 24 31 23 33 27 32 27\n [26] 31 29 28 32 34 31 34 30 20 36 30 32 30 31 27 30 34 35 30 23 26 25 29 30 33\n [51] 29 30 26 20 26 21 31 29 37 29 27 20 28 29 30 33 30 26 28 22 29 31 28 33 33\n [76] 32 33 36 48 28 32 25 27 27 28 27 29 31 30 24 36 22 32 30 27 37 24 31 33 37\n\n\nCode\n# Create a histogram to visualize the data\nhist(binomial_data, main = \"Binomial Distribution\", xlab = \"Number of Successes\", ylab = \"Frequency\", col = \"lightblue\", border = \"black\")\n\n\n\n\n\nCode\n# verify the mean =np, and var=npq\n# Sample mean\nmean(binomial_data) \n\n\n[1] 29.62\n\n\nCode\n# Theoretical mean\nn*p\n\n\n[1] 30\n\n\nCode\n# Sample variance \nvar(binomial_data)\n\n\n[1] 24.94505\n\n\nCode\n# Theoretical variance \nn*p*(1-p)\n\n\n[1] 21\n\n\nYou can calculate the probability of specific outcomes in a binomial distribution in R using the dbinom() function, which calculates the probability mass function (PMF) of the binomial distribution. Here’s how to use it:\n\n\nCode\n# Set the parameters for the binomial distribution\nx &lt;- 2     # Number of successes (the outcome you want to calculate the probability for)\nn &lt;- 10    # Number of trials\np &lt;- 0.3   # Probability of success in each trial\n\n# Calculate the probability of getting 'x' successes in 'n' trials\nprobability &lt;- dbinom(x, size = n, prob = p)\n\n# Print the calculated probability\ncat(\"Probability of\", x, \"successes in\", n, \"trials:\", probability, \"\\n\")\n\n\nProbability of 2 successes in 10 trials: 0.2334744 \n\n\nThe pbinom() function in R is used to calculate cumulative probabilities for a binomial distribution. Specifically, it calculates the cumulative probability that a random variable following a binomial distribution is less than or equal to a specified value. In other words, it gives you the cumulative distribution function (CDF) for a binomial distribution.\nHere’s the basic syntax of the pbinom() function:\n\n\nCode\npbinom(q, size, prob, lower.tail = TRUE)\n\n\nq: The value for which you want to calculate the cumulative probability.\nsize: The number of trials or events in the binomial distribution.\nprob: The probability of success in each trial.\nlower.tail: A logical parameter that determines whether you want the cumulative probability for values less than or equal to q (TRUE) or greater than q (FALSE). By default, it is set to TRUE.\nThe pbinom() function returns the cumulative probability for the specified value q based on the given parameters.\nHere’s an example of how to use pbinom():\n\n\nCode\n# Calculate the cumulative probability that X is less than or equal to 3\ncumulative_prob &lt;- pbinom(3, size = 10, prob = 0.3)\n\n# Print the cumulative probability\ncat(\"Cumulative Probability:\", cumulative_prob, \"\\n\")\n\n\nCumulative Probability: 0.6496107 \n\n\nIn this example, we’re calculating the cumulative probability that a random variable following a binomial distribution with parameters size = 10 and prob = 0.3 is less than or equal to 3. The result is stored in the cumulative_prob variable and printed to the console.\nYou can use the pbinom() function to answer questions like “What is the probability of getting at most 3 successes in 10 trials with a success probability of 0.3?” by specifying the appropriate values for q, size, and prob.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Discrete probability distribution</span>"
    ]
  },
  {
    "objectID": "ch5.html#poisson-probability-distributions-optional",
    "href": "ch5.html#poisson-probability-distributions-optional",
    "title": "3  Discrete probability distribution",
    "section": "3.5 Poisson probability distributions (Optional)",
    "text": "3.5 Poisson probability distributions (Optional)\nTo generate a data set with a Poisson distribution in R, you can use the rpois() function. The Poisson distribution is often used to model the number of events occurring in a fixed interval of time or space when the events happen with a known constant mean rate. Here’s how you can use rpois():\n\n\nCode\n# Set the parameters for the Poisson distribution\nlambda &lt;- 3  # Mean (average) rate of events\n\n# Generate a dataset with a Poisson distribution\npoisson_data &lt;- rpois(n = 100, lambda = lambda)\n\n# Print the generated dataset\nprint(poisson_data)\n\n\n  [1] 5 1 1 5 4 2 1 2 3 4 1 3 1 3 4 5 1 1 3 2 2 6 2 3 3 3 2 2 5 1 3 3 4 4 5 0 1\n [38] 5 2 2 2 1 2 3 5 6 3 5 3 3 2 3 3 3 2 3 1 2 5 3 4 3 3 3 2 1 4 3 3 5 4 1 3 6\n [75] 3 1 4 3 7 4 3 4 0 5 1 1 3 4 2 2 2 3 5 4 4 3 4 3 4 3\n\n\nCode\n# Create a histogram to visualize the data\nhist(poisson_data, main = \"Poisson Distribution\", xlab = \"Number of Events\", ylab = \"Frequency\", col = \"lightblue\", border = \"black\")\n\n\n\n\n\nCode\n# Verify the theoretical mean and variance\nmean(poisson_data)\n\n\n[1] 2.97\n\n\nCode\n#Theoretical mean = lambda\n\nvar(poisson_data)\n\n\n[1] 2.09\n\n\nCode\n#Theoretical variance = lambda\n\n\nTo calculate the probability of a specific value occurring in a Poisson distribution in R, you can use the dpois() function. This function calculates the probability mass function (PMF) of the Poisson distribution. Here’s how to use it:\n\n\nCode\n# Set the parameters for the Poisson distribution\nx &lt;- 2     # The specific value for which you want to calculate the probability\nlambda &lt;- 3  # Mean (average) rate of events\n\n# Calculate the probability of getting exactly 'x' events\nprobability &lt;- dpois(x, lambda)\n\n# Print the calculated probability\ncat(\"Probability of\", x, \"events:\", probability, \"\\n\")\n\n\nProbability of 2 events: 0.2240418 \n\n\nTo calculate the cumulative distribution function (CDF) for a Poisson distribution in R, you can use the ppois() function. This function calculates the cumulative probability that a Poisson random variable is less than or equal to a specified value. Here’s how to use it:\n\n\nCode\n# Set the parameters for the Poisson distribution\nx &lt;- 2     # The specific value for which you want to calculate the cumulative probability\nlambda &lt;- 3  # Mean (average) rate of events\n\n# Calculate the cumulative probability of getting less than or equal to 'x' events\ncumulative_prob &lt;- ppois(x, lambda)\n\n# Print the calculated cumulative probability\ncat(\"Cumulative Probability of less than or equal to\", x, \"events:\", cumulative_prob, \"\\n\")\n\n\nCumulative Probability of less than or equal to 2 events: 0.4231901",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Discrete probability distribution</span>"
    ]
  },
  {
    "objectID": "stat2670_tang_ch6_7.html#estimating-parameters-and-determinging-sample-sizes",
    "href": "stat2670_tang_ch6_7.html#estimating-parameters-and-determinging-sample-sizes",
    "title": "4  NORMAL PROBABILITY DISTRIBUTION",
    "section": "4.1 ESTIMATING PARAMETERS AND DETERMINGING SAMPLE SIZES",
    "text": "4.1 ESTIMATING PARAMETERS AND DETERMINGING SAMPLE SIZES\n\n4.1.1 ESTIMATING a population proportion (Page 313 Online Course Example)\n\n4.1.1.1 Getting the CI directly\n\n\nCode\np_hat &lt;- 0.53 # 0.53 for 53% sample proportion\nn &lt;- 950 # sample size\nsuccess &lt;- n*p_hat # number of success\n\n# Calculate a 95% confidence interval for the population proportion\nresult &lt;- prop.test(success, n, conf.level = 0.95)\n\n# Extract the confidence interval\nconf_interval &lt;- result$conf.int\n# Print the confidence interval\ncat(\"Confidence Interval:\", conf_interval[1], \"to\", conf_interval[2], \"\\n\")\n\n\nConfidence Interval: 0.4976792 to 0.5620751 \n\n\n\n\n4.1.1.2 Getting the CI step by step\n1.Critical value\n\n\nCode\n# Confidence level (e.g., 0.95 for 95% confidence)\nconfidence_level &lt;- 0.95  \n# get alpha value\nalpha &lt;- 1-confidence_level\n\n# Find the critical Z-value using qnorm()\ncritical_z &lt;- qnorm (1 - alpha/2)\n# Print the result\ncat(\"Critical Z =\", critical_z, \"\\n\")\n\n\nCritical Z = 1.959964 \n\n\n\nMargin of error\n\n\n\nCode\n# Calculate the standard error\nstandard_error &lt;- sqrt((p_hat * (1 - p_hat)) / n)\n# Calculate the margin of error\nmargin_of_error &lt;- critical_z * standard_error\n# Print the result\ncat(\"E=\", margin_of_error, \"\\n\")\n\n\nE= 0.03173753 \n\n\n\nConfidence interval\n\n\n\nCode\n# Calculate the confidence interval\nconfidence_interval &lt;- c (p_hat - margin_of_error,\n                          p_hat + margin_of_error)\n\n# Print the confidence interval\ncat(\"Confidence Interval:\", confidence_interval[1], \"to\", confidence_interval[2], \"\\n\")\n\n\nConfidence Interval: 0.4982625 to 0.5617375 \n\n\n\n\n\n4.1.2 ESTIMATING a population mean\n\n4.1.2.1 Get the CI directly with Original data values are given. (Page 343 Mercury question)\n\n\nCode\n# Calculate a 98% confidence interval for the population mean\n#Sample data \nmercury &lt;- c(0.56, 0.75, 0.10, 0.95, 1.25, 0.54, 0.88)\nresult &lt;- t.test(mercury,conf.level = 0.98)\n\n# Extract the confidence interval\nconf_interval &lt;- result$conf.int\n\n# Print the confidence interval\ncat(\"Confidence Interval:\", conf_interval[1], \"to\", conf_interval[2], \"\\n\")\n\n\nConfidence Interval: 0.2841145 to 1.153028 \n\n\n\n\n4.1.2.2 Get the CI step by step with given mean and standard deviation (Page 341 Hershey kisses question)\n\nCritical value\n\n\n\nCode\nconfidence_level &lt;- 0.99  # Confidence level (e.g., 0.99 for 99% confidence)\nalpha &lt;- 1- confidence_level\nn &lt;- 32         # Sample size\n\n# Calculate the degrees of freedom\ndegrees_of_freedom &lt;- n - 1\n\n# Find the critical t-value using qt()\ncritical_t &lt;- qt(1 - alpha/ 2, df = degrees_of_freedom)\n\n# Print the result\ncat(\"Critical t-value for degrees of freedom =\", degrees_of_freedom, \"and confidence level =\", confidence_level, \":\", critical_t, \"\\n\")\n\n\nCritical t-value for degrees of freedom = 31 and confidence level = 0.99 : 2.744042 \n\n\n\nMargin of error\n\n\n\nCode\n# Given sample standard deviation (this is s value)\nsample_standard_deviation &lt;- 0.1077\n\n# Calculate the standard error\nstandard_error &lt;- sample_standard_deviation / sqrt(n)\n\n# Calculate the margin of error\nmargin_of_error &lt;- critical_t * standard_error\n\n# Print the result\ncat(\"Margin of Error for confidence level =\", confidence_level, \"and sample size =\", n, \":\", margin_of_error, \"\\n\")\n\n\nMargin of Error for confidence level = 0.99 and sample size = 32 : 0.0522434 \n\n\n\nConfidence interval\n\n\n\nCode\nx_bar&lt;- 4.5210       # Sample mean\n\n# Calculate the lower and upper bounds of the confidence interval\nlower_bound &lt;- x_bar - margin_of_error\nupper_bound &lt;- x_bar + margin_of_error\n\n# Print the result\ncat(\"Confidence Interval:\", lower_bound, \"to\", upper_bound, \"\\n\")\n\n\nConfidence Interval: 4.468757 to 4.573243 \n\n\n\n\n\n4.1.3 ESTIMATING a population variance (body temperature example page 353)\n\n4.1.3.1 Critical values\n\n\nCode\nconfidence_level &lt;- 0.95  # Confidence level ( 0.95 for 95% confidence)\nalpha &lt;- 1- confidence_level\nsample_size &lt;- 106          # Sample size\ndegrees_of_freedom &lt;- sample_size - 1  # Degrees of freedom for the chi-squared distribution\n\n# Find the critical values using the chi-squared distribution\nlower_critical_value &lt;- qchisq(1-alpha/2, df = degrees_of_freedom)\nupper_critical_value &lt;- qchisq(alpha/2, df = degrees_of_freedom)\n\n# Print the results\ncat(\"Lower Critical Value:\", lower_critical_value, \"\\n\")\n\n\nLower Critical Value: 135.247 \n\n\nCode\ncat(\"Upper Critical Value:\", upper_critical_value, \"\\n\")\n\n\nUpper Critical Value: 78.5364 \n\n\n\n\n4.1.3.2 Confidence interval\n\n\nCode\nsample_standard_deviation &lt;- 0.62                  # sample standard deviation s\nsample_variance &lt;- sample_standard_deviation^2     # Sample variance\n\n# Calculate the confidence interval for variance\nconfidence_interval &lt;- c(((sample_size - 1) * sample_variance) / lower_critical_value,\n                         ((sample_size - 1) * sample_variance) / upper_critical_value)\n\n# Print the confidence interval\nconfidence_interval\n\n\n[1] 0.2984318 0.5139273",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>NORMAL PROBABILITY DISTRIBUTION</span>"
    ]
  },
  {
    "objectID": "stat2670_tang_ch6_7.html#sample-questions-for-chapter-6-and-7",
    "href": "stat2670_tang_ch6_7.html#sample-questions-for-chapter-6-and-7",
    "title": "4  NORMAL PROBABILITY DISTRIBUTION",
    "section": "4.2 SAMPLE QUESTIONS FOR CHAPTER 6 AND 7",
    "text": "4.2 SAMPLE QUESTIONS FOR CHAPTER 6 AND 7\n\n4.2.1 SECTION 6.1\n\n4.2.1.1 Bone density scores are normally distributed with a mean of 0 and a standard deviation of 1. Find the probability of the given bone density test scores. Please use r instead of table and round your answers to four decimal places.\n\nLess than -2.00\nGreater than 2.33\nBetween -0.77 and 1.42\n\n\n\n4.2.1.2 Bone density scores are normally distributed with a mean of 0 and a standard deviation of 1.Find the bone desity test scores corresponding to the given information. Round your answer to two decimal places.\n\nFind the 99th percentile P_{99}. This is the bone density score separating the bottom 99% from the top 1%.\nFind the bone density scores that are the three Quartiles: Q_1, Q_2,Q_3.\n\n\n\n4.2.1.3 Find the indicated critical value. Round results to two decimal places.\n\nZ_{0.25}\nZ_{0.02}\nZ_{0.06}\n\n\n\n\n4.2.2 SECTION 6.2\n\n4.2.2.1 The IQ test scores of adults are normally distributed with a mean of 100 and a standard deviation of 15 (As on the Wechsler IQ test).\n\nFind the probability that a person has IQ score greater than 125.\nFind the probability that a person has IQ score between 90 and 105.\nFind the P_{90}, which is the IQ score to separating the bottom 90% from the top 10%.\n\n\n\n\n4.2.3 SECTION 6.4\n\n4.2.3.1 Assume that weights of men are normally distributed with a mean of 189 lb and a standard deviation of 39 lb.\n\nIf one man is randomly selected, What is the probability that his weight exceeds 140 lb.\nIf 30 men are randomly selected, what is the probability that their mean weight exceeds 140 lb.\n\n\n\n\n4.2.4 SECTION 7.1\n\n4.2.4.1 One of Mendel’s famous genetics experiments yielded 580 peas, with 428 of them green and 152 yellow.\nFind a 99% confidence interval estimate of the percentage of green peas. a) Find the critical value. b) Find the margin of error. c) Find the confidence interval\n\n\n\n4.2.5 SECTION 7.2\n\n4.2.5.1 The summary statistics for the weights of Pepsi in randomly selected cans are n=36, \\bar{x}=0.82410 lb, s=0.00570 lb. Use a confidence level of 95%\n\nFind the critical value.\nFind the margin of error.\nFind the confidence interval\n\n\n\n\n4.2.6 SECTION 7.3\n\n4.2.6.1 Assume the weights of dollar coins are normally distributed. Find the 95% confidence interval given n=20, s= 0.04111.\n\nFind the critical values\nFind the confidence interval.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>NORMAL PROBABILITY DISTRIBUTION</span>"
    ]
  },
  {
    "objectID": "stat2670_r_project_PARK_lecture.html#correlation-and-regression",
    "href": "stat2670_r_project_PARK_lecture.html#correlation-and-regression",
    "title": "5  Hypothesis Testing",
    "section": "5.1 Correlation and Regression",
    "text": "5.1 Correlation and Regression\n\n5.1.1 Correlation\nWe check if a linear correlation exists between two variables using cor() function.\n\n\nCode\n# We can calculate the correlation coefficient between x and y with the following code.\n# cor(x, y)\n\n\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(patchwork)\ndata(\"mtcars\")\nnames(mtcars)\n\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"\n\n\n\n\nCode\nattach(mtcars)\n# positive correlation\nqplot(wt, disp, data = mtcars) +\n  geom_text(aes(x=2, y=400, label=\"r = 0.888\"))\n\n\n\n\n\nCode\ncor(wt, disp)\n\n\n[1] 0.8879799\n\n\nCode\n# negative correlation\nqplot(mpg, wt, data = mtcars)  +\n  geom_text(aes(x=30, y=5, label=\"r = - 0.868\"))\n\n\n\n\n\nCode\ncor(mpg, wt)\n\n\n[1] -0.8676594\n\n\nCode\n# no correlation\nqplot(drat, qsec, data = mtcars)  +\n  geom_text(aes(x=4.5, y=22, label=\"r = 0.091\"))\n\n\n\n\n\nCode\ncor(drat, qsec)\n\n\n[1] 0.09120476\n\n\n\nwt and disp have a positive correlation with r =0.888.\nwt and disp have a negative correlation with r = -0.868.\nwt and disp does not have a significant correlation with r = -0.175.\n\n\n\n5.1.2 Regression\nAssume we have a data set data with x and y variables and we check their linear relationship. We can find the slope and the intercept of the estimated regression line using the following code.\n\n\nCode\n# res &lt;- lm(y ~ x, data)\n# summary(res)\n\n\nFor example, we can find the regression line equation between disp(x, predictor) and wt(y, response) as below.\n\n\nCode\nlibrary(tidyverse)\ndata(\"mtcars\")\n\nres &lt;- lm(wt ~ disp, mtcars)\nsummary(res)\n\n\n\nCall:\nlm(formula = wt ~ disp, data = mtcars)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.89044 -0.29775 -0.00684  0.33428  0.66525 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 1.5998146  0.1729964   9.248 2.74e-10 ***\ndisp        0.0070103  0.0006629  10.576 1.22e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4574 on 30 degrees of freedom\nMultiple R-squared:  0.7885,    Adjusted R-squared:  0.7815 \nF-statistic: 111.8 on 1 and 30 DF,  p-value: 1.222e-11\n\n\nThe estimated regression line is \\textrm{wt} = 1.600 + 0.007\\textrm{disp} since the intercept is 1.6 and the slope is 0.007. Both of them are significantly different from 0 with a significance level \\alpha = 0.05. It means that one inch increase in disp (displacement) makes 7 lbs increase in wt (weight). On average, if a car has a one-inch longer displacement, it is 7 pounds heavier.\nIf a car has 200 inches displacement, then its estimated weight can be calculated as  1.600 + 0.007\\cdot200 = 3000 \\textrm{ lbs}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Hypothesis Testing</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "6  Summary",
    "section": "",
    "text": "In summary, TBA.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Triola, Mario F. 2022. Elementary Statistics. USA: Pearson.",
    "crumbs": [
      "References"
    ]
  }
]